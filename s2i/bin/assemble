#!/bin/bash

function rake_assets_precompile() {
  [[ "$DISABLE_ASSET_COMPILATION" == "true" ]] && return
  [ ! -f Gemfile ] && return
  [ ! -f Rakefile ] && return
  ! grep " rake " Gemfile.lock >/dev/null && return
  ! bundle exec 'rake -T' | grep "assets:precompile" >/dev/null && return

  echo "---> Starting asset compilation ..."
  rake assets:precompile --trace
}

set -e

export RACK_ENV=${RACK_ENV:-"production"}

if [ -n "$RUBYGEM_MIRROR" ]; then
  bundle config mirror.https://rubygems.org $RUBYGEM_MIRROR
fi

shopt -s dotglob
echo "---> Installing application source ..."
rsync -av --progress /tmp/src/* ./
#mv /tmp/src/* ./

# Change the npm registry mirror if provided
if [ -n "$NPM_MIRROR" ]; then
	npm config set registry $NPM_MIRROR
fi

if [ -n "$REMOVE_BUNDLER_SPECIFICATION"]; then
        perl -0777 -i.original -pe 's/\nBUNDLED\ WITH\n.*\n//' Gemfile.lock
fi

echo "---> Building your Ruby application from source ..."
if [ -f Gemfile ]; then
  ADDTL_BUNDLE_ARGS="--retry 2"
  if [ -f Gemfile.lock ]; then
    ADDTL_BUNDLE_ARGS+=" --deployment"
  fi

  if [[ "$RAILS_ENV" == "development" || "$RACK_ENV" == "development" ]]; then
    BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-"test"}
  elif [[ "$RAILS_ENV" == "test" || "$RACK_ENV" == "test" ]]; then
    BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-"development"}
  else
    BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-"development:test"}
  fi
  
  if [ -n "$BUNDLE_WITHOUT" ]; then
    ADDTL_BUNDLE_ARGS+=" --without $BUNDLE_WITHOUT"
  fi
  
  echo "---> Running 'bundle install ${ADDTL_BUNDLE_ARGS}' ..."
  bundle install --path ./bundle ${ADDTL_BUNDLE_ARGS}

  echo "---> Cleaning up unused ruby gems ..."
  bundle clean -V
fi

if ! bundle exec rackup -h &>/dev/null; then
  echo "WARNING: Rubygem Rack is not installed in the present image."
  echo "         Add rack to your Gemfile in order to start the web server."
fi

if [[ "$RAILS_ENV" == "production" || "$RACK_ENV" == "production" ]]; then
  rake_assets_precompile
fi

envsubst '${DISCOURSE_HOSTNAME}' < ${NGINX_CONFIGURATION_PATH}/conf.d/discourse.conf > ${NGINX_CONFIGURATION_PATH}/conf.d/discourse.conf.tmp
mv ${NGINX_CONFIGURATION_PATH}/conf.d/discourse.conf.tmp ${NGINX_CONFIGURATION_PATH}/conf.d/discourse.conf

cp -b $HOME/../etc/sidekiq.yml $HOME/config/sidekiq.yml
cp -b $HOME/../etc/puma.rb $HOME/config/puma.rb

# Unset environment variables
#unset DISCOURSE_REDIS_HOST POSTGRESQL_PORT_5432_TCP_PROTO DISCOURSE_DB_NAME DISCOURSE_SERVICE_HOST POSTGRESQL_PORT DISCOURSE_DB_USER REDIS_PORT_6379_TCP_PORT POSTGRESQL_SERVICE_PORT_POSTGRESQL RAILS_ENV POSTGRESQL_SERVICE_HOST DISCOURSE_DB_HOST REDIS_SERVICE_HOST DISCOURSE_REDIS_PASSWORD DISCOURSE_DB_PASSWORD REDIS_SERVICE_PORT REDIS_SERVICE_PORT REDIS_PORT_6379_TCP REDIS_PORT_6379_TCP_ADDR REDIS_PORT REDIS_PORT_6379_TCP_PROTO POSTGRESQL_PORT_5432_TCP POSTGRESQL_PORT_5432_TCP_PORT POSTGRESQL_PORT_5432_TCP_ADDR POSTGRESQL_SERVICE_PORT

# Fix source directory permissions
fix-permissions ./
