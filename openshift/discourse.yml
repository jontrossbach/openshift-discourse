apiVersion: v1
kind: Template
labels:
  app: discourse
  template: discourse-ruby-psql-persistent

metadata:
  annotations:
    description: A example deployment of Discourse
    iconClass: icon-ruby
    openshift.io/display-name: Discourse
    openshift.io/documentation-url: github.com/jontrossbach/openshift-discourse
    openshift.io/long-description: This template deploys Discourse from Git
    openshift.io/provider-display-name: OSPO OSCI, Red Hat, Inc
    tags: quickstart,ruby,nodejs,discourse
    template.openshift.io/bindable: 'false'
  name: discourse
objects:

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}
    redis-password: ${REDIS_PASSWORD}
    site-admin-emails-key: ${SITE_ADMIN_EMAILS_KEY}
    site-admin-emails: ${SITE_ADMIN_EMAILS}
    smtp-password: ${SMTP_PASSWORD}
    smtp-user: ${SMTP_USER}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "postgresql",
        "kind": "Service"}]'
    name: ${NAME}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8081
    selector:
      name: ${NAME}

- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application base image
    name: s2i-discourse-container
    namespace: ${openshift.project()}
    tag: latest

- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Takes s2i Ruby image and adds some dependencies
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: s2i-discourse-container
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: s2i-discourse-container:latest
    source:
      git:
        ref: ${S2I_SOURCE_REPOSITORY_REF}
        uri: ${S2I_SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      dockerStrategy:
        noCache: true
        #see https://docs.openshift.com/container-platform/3.9/dev_guide/builds/build_strategies.html#override-builder-image-scripts
        #scripts: https://raw.githubusercontent.com/mscherer/discourse-openshift/master/
      triggers:
      - type: ImageChange
      - type: ConfigChange

- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    source:
      contextDir: /
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
          - name: DISCOURSE_HOSTNAME
            value: ${APPLICATION_DOMAIN}
          - name: DISCOURSE_DB_HOST
            value: postgresql
          - name: DISCOURSE_DB_NAME
            value: '${DATABASE_NAME}'
          - name: DISCOURSE_DB_USER
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: database-user
          - name: DISCOURSE_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: database-password
          - name: DISCOURSE_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: redis-password
          - name: DISCOURSE_REDIS_HOST
            value: redis
          - name: RAILS_ENV
            value: production
          - name: REMOVE_BUNDLER_SPECIFICATION
            value: ${REMOVE_BUNDLER_SPECIFICATION}
          - name: RAILS_SERVE_STATIC_FILES
            value: 'true'
          - name: DISCOURSE_SERVE_STATIC_ASSETS
            value: 'true'
          #- name: DISCOUSE_PROMETHEUS_TRUSTED_IP_ALLOWLIST_REGEX
          #  value: ${PROMETHEUS_DOMAIN}
          #- name: DISCOURSE_PROMETHEUS_COLLECTOR_HOST
          #  value: $(PROMETHEUS_HOST)
        from:
          kind: ImageStreamTag
          name: s2i-discourse-container:latest
          #namespace: ${openshift.project()}
      type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
      #- github:
      #  secret: ${GITHUB_WEBHOOK_SECRET}
      #type: GitHub

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - name: discourse-puma
          env:
          - name: PUMA_WORKERS
            value: '2'
          - name: DISCOURSE_DB_TYPE
            value: postgresql
          - name: DISCOURSE_DB_HOST
            value: postgresql
          - name: DISCOURSE_DB_NAME
            value: ${DATABASE_NAME}
          - name: DISCOURSE_DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: '${NAME}'
          - name: DISCOURSE_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: '${NAME}'
          - name: DISCOURSE_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: redis-password
          - name: DISCOURSE_REDIS_HOST
            value: redis
          - name: RAILS_ENV
            value: production
          - name: RAILS_SERVE_STATIC_FILES
            value: "true"
          - name: DISCOURSE_SERVE_STATIC_ASSETS
            value: "true"
          - name: SITE_ADMIN_EMAILS
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: site-admin-emails
          - name: SITE_ADMIN_EMAILS_KEY
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: site-admin-emails-key
          - name: DISCOURSE_SMTP_USER_NAME
            valueFrom:
              secretKeyRef:
                name: discourse
                key: smtp-user
          - name: DISCOURSE_SMTP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: smtp-password
          - name: DISCOURSE_SMTP_ADDRESS
            value: ${SMTP_ADDRESS}
          - name: DISCOURSE_SMTP_PORT
            value: ${SMTP_PORT}
          - name: SMTP_ENABLE_START_TLS
            value: 'true'
          - name: DISCOURSE_MAXMIND_LICENSE_KEY
            value: '${DISCOURSE_MAXMIND_LICENSE_KEY}'
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          volumeMounts:
          - mountPath: /opt/app-root/src/public/uploads/
            name: discourse-uploads
          resources:
            limits:
              # limit as per https://github.com/discourse/discourse/blob/master/docs/ADMIN-QUICK-START-GUIDE.md#maintenance
              memory: 1Gi
              cpu: 1
            requests:
              memory: 320Mi
              cpu: 500m

        - name: discourse-sidekiq
          env:
          - name: PUMA_WORKERS
            value: '2'
          - name: DISCOURSE_DB_TYPE
            value: postgresql
          - name: DISCOURSE_DB_HOST
            value: postgresql
          - name: DISCOURSE_DB_NAME
            value: discourse
          - name: DISCOURSE_DB_USER
            valueFrom:
              secretKeyRef:
                name: discourse
                key: database-user
          - name: DISCOURSE_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: discourse
                key: database-password
          - name: DISCOURSE_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: redis-password
          - name: DISCOURSE_REDIS_HOST
            value: redis
          - name: RAILS_ENV
            value: production
          - name: RAILS_SERVE_STATIC_FILES
            value: 'true'
          - name: DISCOURSE_SERVE_STATIC_ASSETS
            value: 'true'
          - name: SITE_ADMIN_EMAILS
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: site-admin-emails
          - name: DISCOURSE_SMTP_USER_NAME
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: smtp-user
          - name: SITE_ADMIN_EMAILS_KEY
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: site-admin-emails-key
          - name: DISCOURSE_SMTP_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '${NAME}'
                key: smtp-password
          - name: DISCOURSE_SMTP_ADDRESS
            value: ${SMTP_ADDRESS}
          - name: DISCOURSE_SMTP_PORT
            value: '587'
          - name: SMTP_ENABLE_START_TLS
            value: 'true'
          image: ' '
          command: ['sh', '-c', 'bundler exec sidekiq -C config/sidekiq.yml']
#          readinessProbe:
#            exec:
#              # for some reason this works in the discourse-puma &
#              # discourse-sidekiq but not as a readynessProbe
#              command: ['sh', '-c', 'export REDIS_URL=redis://f:$(REDIS_PASSWORD)@redis:587/5 && bundle exec sidekiqmon processes']
#            failureThreshold: 3
#            initialDelaySeconds: 60
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 10
#          livenessProbe:
#            exec:
#              # for some reason this works in the discourse-puma &
#              # discourse-sidekiq but not livenessProbe
#              command: ['sh', '-c', 'export REDIS_URL=redis://f:$(REDIS_PASSWORD)@redis:587/5 && bundle exec sidekiqmon processes']
#            failureThreshold: 3
#            initialDelaySeconds: 300
#            periodSeconds: 10
#            successThreshold: 1
#            timeoutSeconds: 10
          volumeMounts:
          - mountPath: /opt/app-root/src/public/uploads/
            name: discourse-uploads
          resources:
            limits:
              memory: 800Mi
              cpu: "1"
            requests:
              memory: 400Mi
              cpu: 200m

        - name: discourse-nginx
          env: # clear not needed env vars 
          - name: DISCOURSE_DB_HOST
          - name: DISCOURSE_DB_PASSWORD
          - name: DISCOURSE_REDIS_PASSWORD
          - name: DISCOURSE_REDIS_HOST
          image: ' '
          command: ['sh', '-c', 'nginx -g "daemon off;" -c $NGINX_CONFIGURATION_PATH/nginx.conf']
          ports:
          - containerPort: 8081
          readinessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 3
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 30
            timeoutSeconds: 3
          volumeMounts:
          - mountPath: /opt/app-root/src/public/uploads/
            name: discourse-uploads
          resources:
            limits:
              # limit as per https://github.com/discourse/discourse/blob/master/docs/ADMIN-QUICK-START-GUIDE.md#maintenance
              memory: ${MEMORY_NGINX_LIMIT}
              cpu: 1
            requests:
              memory: 320Mi
              cpu: 200m

        initContainers:
        - name: init-database-table
          image: ' '
          env:
            - name: SITE_ADMIN_EMAILS
              valueFrom:
                secretKeyRef:
                  name: '${NAME}'
                  key: site-admin-emails
            - name: SITE_ADMIN_EMAILS_KEY
              valueFrom:
                secretKeyRef:
                  name: '${NAME}'
                  key: site-admin-emails-key
          command: ['sh', '-c', 'rake db:prepare --trace && $STI_SCRIPTS_PATH/initAdmins']
        volumes:
        - name: discourse-uploads
          persistentVolumeClaim:
            claimName: discourse-uploads

    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - discourse-puma
        - discourse-sidekiq
        - discourse-nginx
        - init-database-table
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: discourse-uploads
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DISCOURSE_DATA_VOLUME_CAPACITY}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: postgresql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${POSTGRESQL_VOLUME_CAPACITY}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: postgresql

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: postgresql
  spec:
    replicas: 1
    selector:
      name: postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: postgresql
        name: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          - name: POSTGRESQL_DATABASE
            value: ${DATABASE_NAME}
          image: ' '
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_POSTGRESQL_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${POSTGRESQL_VERSION}
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: redis
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${REDIS_VOLUME_CAPACITY}

- apiVersion: v1
  kind: Service
  metadata:
    name: redis
  spec:
    ports:
    - name: redis
      port: 6379
      targetPort: 6379
    selector:
      name: redis

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: redis
  spec:
    replicas: 1
    selector:
      name: redis
    strategy:
      type: Recreate
    template:
      metadata:
        name: redis
        labels:
          name: redis
      spec:
        containers:
        - capabilities: {}
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redis-password
                name: ${NAME}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/redis/data
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - redis
        from:
          kind: ImageStreamTag
          name: redis:${REDIS_VERSION}
          namespace: ${NAMESPACE}
        lastTriggeredImage: ''
      type: ImageChange
    - type: ConfigChange
  status: {}


parameters:

- description: The name assigned to all of the front end objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: discourse

- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift

- description: Whether to delete bundler spec from Gemfile.lock.
  displayName: Ignore Bundler Version
  name: REMOVE_BUNDLER_SPECIFICATION
  required: true
  value: 'true'

- description: Version of PostgreSQL image to be used (10 or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: '12'

- description: Maximum amount of memory the Rails container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 1024Mi

- description: Maximum amount of memory the PostgreSQL container can use.
  displayName: Memory Limit (PostgreSQL)
  name: MEMORY_POSTGRESQL_LIMIT
  required: true
  value: 512Mi

- description: Maximum amount of memory the Nginx container can use.
  displayName: Memory Limit (Nginx)
  name: MEMORY_NGINX_LIMIT
  required: true
  value: 512Mi

- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: POSTGRESQL_VOLUME_CAPACITY
  required: true
  value: 1Gi

- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/discourse/discourse

- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
  value: v2.7.7 

# - description: Github trigger secret.  A difficult to guess string encoded as part
#     of the webhook URL.  Not encrypted.
#   displayName: GitHub Webhook Secret
#   from: '[a-zA-Z0-9]{40}'
#   generate: expression
#   name: GITHUB_WEBHOOK_SECRET

- description: Names PostgreSQL database after the application.
  displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: discourse

- description: Names PostgreSQL database user after the application.
  displayName: Database Username
  name: DATABASE_USER
  required: true
  value: discourse

- description: Password for the PostgreSQL connection user.
  displayName: Database User Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD

- description: Version of Redis image to be used (3.2 or latest).
  displayName: Version of Redis Image
  name: REDIS_VERSION
  required: true
  value: latest

- description: Password for the Redis connection user.
  displayName: Redis Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: REDIS_PASSWORD
  required: true

- description: Volume space available for redis data, e.g. 512Mi, 2Gi.
  displayName: Redis Volume Capacity
  name: REDIS_VOLUME_CAPACITY
  required: true
  value: 1Gi

- description: Volume space available for discourse data, e.g. 512Mi, 2Gi.
  displayName: Discourse Data Volume Capacity
  name: DISCOURSE_DATA_VOLUME_CAPACITY
  required: true
  value: 1Gi

- name: SMTP_PORT
  descritpion: The SMTP port for discourse instance to email through
  displayName: SMTP port
  required: true
  value: '587'

# These are specific to the maintainer's OSCI team
- description: SMTP mail server domain
  displayName: Discourse mail server domain
  name: SMTP_ADDRESS
  required: true
  value: mx1.osci.io

- description: The exposed hostname that will route to the Nginx-to-Rails service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
#  value: http://${openshift.project()}.apps.ospo-osci.z3b1.p1.openshiftapps.com/

- description: The URL of the repository with your image source code.
  displayName: Git Repository URL
  name: S2I_SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/jontrossbach/openshift-discourse

- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: S2I_SOURCE_REPOSITORY_REF
  value: main

# Is convenient to add these from the oc process command with `-p` flag
- name: SITE_ADMIN_EMAILS
  descritpion: Discourse instance's default admin users (if not admins it will default to a set up screen upon successful deployment)
  displayName: Discourse admin emails
  required: false

- name: SITE_ADMIN_EMAILS_KEY
  description: Discourse instance's default admin passwords (required if using default admins)
  displayName: Discourse admin Key
  required: false

# These have to be added from the oc process command with `-p` flag
- name: PROJECT_NAME
  descritpion: The OpenShift/Kubernetes Project/Namespace name, respectively
  displayName: Project name
  required: true

- name: SMTP_USER
  descritpion: The SMTP server's user for discourse to be able to send emails
  displayName: Discourse SMTP user
  required:

- name: SMTP_PASSWORD
  descritpion: The SMTP	server's user password to be able to send emails
  displayName: Discourse SMTP user password

- description: Maxmind IP Reverse Look Up Key
  displayName: Maxmind IP Reverse Look Up Key
  name: DISCOURSE_MAXMIND_LICENSE_KEY
  required: false

#- name: PROMETHEUS_DOMAIN
#  description: The trusted regex for the Prometheus monitor
#  displayName: prometheus_trusted_ip_allowlist_regex